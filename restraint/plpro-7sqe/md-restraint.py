# This script was generated by OpenMM-Setup on 2021-05-08.
from openmm import *
from simtk.openmm.app import *
from simtk.unit import *
from sys import stdout,argv
import mdtraj as md
import numpy as np

# Input Files
pdbfile = "plpro-7sqe-em.pdb"
grofile = "plpro-7sqe-em.gro"
outfile = "plpro-7sqe-restraint"
gpuid = '0'
topfile = "topol.top"


# Input Files
gro = GromacsGroFile(grofile)
top = GromacsTopFile(topfile, includeDir='/root/miniconda3/envs/openmm_env/share/gromacs/top',
    periodicBoxVectors=gro.getPeriodicBoxVectors())

# System Configuration
nonbondedMethod = PME
nonbondedCutoff = 1.0*nanometers
ewaldErrorTolerance = 0.0005
constraints = HBonds
rigidWater = True
constraintTolerance = 0.000001
hydrogenMass = 4.0*amu

# Integration Options
dt = 0.004 * picoseconds
temperature = 300*kelvin
friction = 1.0/picosecond
pressure = 1.0*atmospheres
barostatInterval = 25

# Simulation Options
emsteps =       1000       # default
eqsteps =    1250000       # 
mdsteps = 2500000000       # 
exsteps =     250000       # 

platform = Platform.getPlatformByName('CUDA')
platformProperties = {'Precision': 'mixed',"DeviceIndex":gpuid}
#platformProperties["DeviceIndex"] = "0"
os.system("export OPENMM_CPU_THREADS=8")

# Output Options
dcdReporter  = DCDReporter(outfile+'.dcd', exsteps)
# pdbReporter  = PDBReporter(outfile+'.pdb', exsteps)
chkReporter  = CheckpointReporter(outfile+'.chk', exsteps*10)
datReporter0 = StateDataReporter(outfile+'.log', exsteps, totalSteps=mdsteps,
               step=True, speed=True, progress=True, potentialEnergy=True, 
               temperature=True,volume=True, separator=',')
datReporter1 = StateDataReporter(stdout, exsteps, step=True,
               time=True, potentialEnergy=True, kineticEnergy=True, totalEnergy=True,
               temperature=True, progress=True, volume=True, density=True,
               remainingTime=True, speed=True, totalSteps=mdsteps, separator=',')
datReporter2 = StateDataReporter(outfile+'.csv', exsteps, step=True,
               time=True, potentialEnergy=True, kineticEnergy=True, totalEnergy=True,
               temperature=True, progress=True, volume=True, density=True,
               remainingTime=True, speed=True, totalSteps=mdsteps, separator=',')

# Prepare the Simulation
print('Building system...')
topology = top.topology
positions = gro.positions
system = top.createSystem(nonbondedMethod=nonbondedMethod, nonbondedCutoff=nonbondedCutoff,
    constraints=constraints, rigidWater=rigidWater, ewaldErrorTolerance=ewaldErrorTolerance, hydrogenMass=hydrogenMass)
barostat = MonteCarloBarostat(pressure, temperature, barostatInterval)
system.addForce(barostat)


print("=================================================================")
pdb = PDBFile(pdbfile)
restraint = CustomExternalForce('k*periodicdistance(x, y, z, x0, y0, z0)^2')
restraint.addGlobalParameter('k', 10000.0*kilojoules_per_mole/nanometer)
restraint.addPerParticleParameter('x0')
restraint.addPerParticleParameter('y0')
restraint.addPerParticleParameter('z0')


traj = md.load(pdbfile)
round_res = [108, 110, 111, 156] + [i for i in range(160, 167+1)] + [170, 207, 244, 245, 246, 247, 248] + [i for i in range(261, 273+1)] + [298, 299, 300, 301]
res_res = [i for i in range(1, 314+1) if i not in round_res]

res_atoms = traj.top.select(' '.join([f'resid {i-1}' for i in res_res]) + ' and not (symbol == "H")')

res_info = []
for atom in pdb.topology.atoms():
    if atom.index in res_atoms:
        res_info.append(str(atom))
        restraint.addParticle(atom.index, pdb.positions[atom.index])
system.addForce(restraint)


with open(outfile+'-restraint.log', 'w') as f:
    f.write('\n'.join(res_info))


print("=================================================================")
integrator = LangevinIntegrator(temperature,friction, dt)
integrator.setConstraintTolerance(constraintTolerance)
simulation = Simulation(topology, system, integrator, platform, platformProperties)
simulation.context.setPositions(positions)

# # Minimize and Equilibrate
# print('Performing energy minimization...')
# simulation.minimizeEnergy()
# # let's save a PDB of the last frame of the simulation
# lastpositions = simulation.context.getState(getPositions=True).getPositions()
# PDBFile.writeFile(top.topology, lastpositions, open(outfile+'-em.pdb', 'w'))

# print('Equilibrating...')
# simulation.reporters.append(StateDataReporter(stdout, 1000, step=True, potentialEnergy=True, temperature=True, speed=True, totalSteps=eqsteps, separator='\t'))
# simulation.context.setVelocitiesToTemperature(temperature)
# simulation.step(eqsteps)

# print('Running Simulated Annealing MD')
# # every int(eqsteps/6) steps raise the temperature by 5 K, ending at 300 K
# T = 50*kelvin
# simulation.context.setVelocitiesToTemperature(T)
# for i in range(6):
#     simulation.step( int(eqsteps/6) )
#     integrator.setTemperature(T+(i*T))
#     barostat.setDefaultTemperature(T+(i*T))

# # let's also save a PDB of the last frame of the simulation
# lastpositions = simulation.context.getState(getPositions=True).getPositions()
# PDBFile.writeFile(top.topology, lastpositions, open(outfile+'-eq.pdb', 'w'))

# exit()
# Simulate
print('Simulating...')
simulation.reporters.append(dcdReporter)
simulation.reporters.append(chkReporter)
#simulation.saveCheckpoint('state.chk') # Same like the above!
#simulation.loadCheckpoint('state.chk') # Only for restart !
# Open checkpoint file like the follows better:
#with open("restart.chk",'rb') as f:
#    sim.context.loadCheckpoint(f.read())
# simulation.reporters.append(pdbReporter)
simulation.reporters.append(datReporter0)
simulation.reporters.append(datReporter1)
simulation.reporters.append(datReporter2)
simulation.reporters.append(StateDataReporter(stdout, 5000, step=True, potentialEnergy=True, temperature=True, speed=True, totalSteps=mdsteps, separator=','))
simulation.currentStep = 0
simulation.context.setVelocitiesToTemperature(temperature)
simulation.step(mdsteps)

# let's also save a PDB of the last frame of the simulation
lastpositions = simulation.context.getState(getPositions=True).getPositions()
PDBFile.writeFile(top.topology, lastpositions, open(outfile+'-md.pdb', 'w'))
